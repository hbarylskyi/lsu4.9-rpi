import smbus
import time

# Constants for the SSD1306
SSD1306_I2C_ADDRESS = 0x3C
SSD1306_COMMAND = 0x00
SSD1306_DISPLAY_ON = 0xAF
SSD1306_DISPLAY_OFF = 0xAE

class SSD1306:
    def __init__(self, i2c_bus=1):
        self.bus = smbus.SMBus(i2c_bus)

    def send_command(self, command):
        self.bus.write_byte_data(SSD1306_I2C_ADDRESS, SSD1306_COMMAND, command)

    def initialize(self):
        # Initialization sequence for SSD1306
        init_sequence = [
            0xAE,  # Display off
            0xD5, 0x80,  # Set display clock divide ratio/oscillator frequency
            0xA8, 0x3F,  # Set multiplex ratio (1 to 64)
            0xD3, 0x00,  # Set display offset
            0x40,  # Set start line address
            0x8D, 0x14,  # Charge pump setting
            0x20, 0x00,  # Memory addressing mode
            0xA1,  # Set segment re-map
            0xC8,  # Set COM output scan direction
            0xDA, 0x12,  # Set COM pins hardware configuration
            0x81, 0xCF,  # Set contrast control
            0xD9, 0xF1,  # Set pre-charge period
            0xDB, 0x40,  # Set VCOMH deselect level
            0xA4,  # Entire display on
            0xA6,  # Set normal display
            0xAF  # Display on
            0x00, 0x00, 0x00, 0x00, 0x00,  # Space
            0x00, 0x00, 0x5F, 0x00, 0x00,  # !
            0x00, 0x07, 0x00, 0x07, 0x00,  # "
            0x14, 0x7F, 0x14, 0x7F, 0x14,  # #
            0x24, 0x2A, 0x7F, 0x2A, 0x12,  # $
            0x23, 0x13, 0x08, 0x64, 0x62,  # %
            0x36, 0x49, 0x55, 0x22, 0x50,  # &
            0x00, 0x05, 0x03, 0x00, 0x00,  # '
            0x00, 0x1C, 0x22, 0x41, 0x00,  # (
            0x00, 0x41, 0x22, 0x1C, 0x00,  # )
            0x14, 0x08, 0x3E, 0x08, 0x14,  # *
            0x08, 0x08, 0x3E, 0x08, 0x08,  # +
            0x00, 0x50, 0x30, 0x00, 0x00,  # ,
            0x08, 0x08, 0x08, 0x08, 0x08,  # -
            0x00, 0x60, 0x60, 0x00, 0x00,  # .
            0x20, 0x10, 0x08, 0x04, 0x02,  # /
            0x3E, 0x51, 0x49, 0x45, 0x3E,  # 0
            0x00, 0x42, 0x7F, 0x40, 0x00,  # 1
            0x42, 0x61, 0x51, 0x49, 0x46,  # 2
            0x21, 0x41, 0x45, 0x4B, 0x31,  # 3
            0x18, 0x14, 0x12, 0x7F, 0x10,  # 4
            0x27, 0x45, 0x45, 0x45, 0x39,  # 5
            0x3C, 0x4A, 0x49, 0x49, 0x30,  # 6
            0x01, 0x71, 0x09, 0x05, 0x03,  # 7
            0x36, 0x49, 0x49, 0x49, 0x36,  # 8
            0x06, 0x49, 0x49, 0x29, 0x1E,  # 9
            0x00, 0x36, 0x36, 0x00, 0x00,  # :
            0x00, 0x56, 0x36, 0x00, 0x00,  # ;
            0x08, 0x14, 0x22, 0x41, 0x00,  # <
            0x14, 0x14, 0x14, 0x14, 0x14,  # =
            0x00, 0x41, 0x22, 0x14, 0x08,  # >
            0x02, 0x01, 0x51, 0x09, 0x06,  # ?
            0x32, 0x49, 0x79, 0x41, 0x3E,  # @
            0x7E, 0x11, 0x11, 0x11, 0x7E,  # A
            0x7F, 0x49, 0x49, 0x49, 0x36,  # B
            0x3E, 0x41, 0x41, 0x41, 0x22,  # C
            0x7F, 0x41, 0x41, 0x22, 0x1C,  # D
            0x7F, 0x49, 0x49, 0x49, 0x41,  # E
            0x7F, 0x09, 0x09, 0x09, 0x01,  # F
            0x3E, 0x41, 0x49, 0x49, 0x7A,  # G
            0x7F, 0x08, 0x08, 0x08, 0x7F,  # H
            0x00, 0x41, 0x7F, 0x41, 0x00,  # I
            0x20, 0x40, 0x41, 0x3F, 0x01,  # J
            0x7F, 0x08, 0x14, 0x22, 0x41,  # K
            0x7F, 0x40, 0x40, 0x40, 0x40,  # L
            0x7F, 0x02, 0x04, 0x02, 0x7F,  # M
            0x7F, 0x04, 0x08, 0x10, 0x7F,  # N
            0x3E, 0x41, 0x41, 0x41, 0x3E,  # O
            0x7F, 0x09, 0x09, 0x09, 0x06,  # P
            0x3E, 0x41, 0x51, 0x21, 0x5E,  # Q
            0x7F, 0x09, 0x19, 0x29, 0x46,  # R
            0x46, 0x49, 0x49, 0x49, 0x31,  # S
            0x01, 0x01, 0x7F, 0x01, 0x01,  # T
            0x3F, 0x40, 0x40, 0x40, 0x3F,  # U
            0x1F, 0x20, 0x40, 0x20, 0x1F,  # V
            0x3F, 0x40, 0x38, 0x40, 0x3F,  # W
            0x63, 0x14, 0x08, 0x14, 0x63,  # X
            0x07, 0x08, 0x70, 0x08, 0x07,  # Y
            0x61, 0x51, 0x49, 0x45, 0x43,  # Z
            0x00, 0x7F, 0x41, 0x41, 0x00,  # [
            0x02, 0x04, 0x08, 0x10, 0x20,  # Backslash
            0x00, 0x41, 0x41, 0x7F, 0x00,  # ]
            0x04, 0x02, 0x01, 0x02, 0x04,  # ^
            0x40, 0x40, 0x40, 0x40, 0x40,  # _
            0x00, 0x01, 0x02, 0x04, 0x00,  # `
            0x20, 0x54, 0x54, 0x54, 0x78,  # a
            0x7F, 0x48, 0x44, 0x44, 0x38,  # b
            0x38, 0x44, 0x44, 0x44, 0x20,  # c
            0x38, 0x44, 0x44, 0x48, 0x7F,  # d
            0x38, 0x54, 0x54, 0x54, 0x18,  # e
            0x08, 0x7E, 0x09, 0x01, 0x02,  # f
            0x0C, 0x52, 0x52, 0x52, 0x3E,  # g
            0x7F, 0x08, 0x04, 0x04, 0x78,  # h
            0x00, 0x44, 0x7D, 0x40, 0x00,  # i
            0x20, 0x40, 0x44, 0x3D, 0x00,  # j
            0x7F, 0x10, 0x28, 0x44, 0x00,  # k
            0x00, 0x41, 0x7F, 0x40, 0x00,  # l
            0x7C, 0x04, 0x18, 0x04, 0x78,  # m
            0x7C, 0x08, 0x04, 0x04, 0x78,  # n
            0x38, 0x44, 0x44, 0x44, 0x38,  # o
            0x7C, 0x14, 0x14, 0x14, 0x08,  # p
            0x08, 0x14, 0x14, 0x18, 0x7C,  # q
            0x7C, 0x08, 0x04, 0x04, 0x08,  # r
            0x48, 0x54, 0x54, 0x54, 0x20,  # s
            0x04, 0x3F, 0x44, 0x40, 0x20,  # t
            0x3C, 0x40, 0x40, 0x20, 0x7C,  # u
            0x1C, 0x20, 0x40, 0x20, 0x1C,  # v
            0x3C, 0x40, 0x30, 0x40, 0x3C,  # w
            0x44, 0x28, 0x10, 0x28, 0x44,  # x
            0x0C, 0x50, 0x50, 0x50, 0x3C,  # y
            0x44, 0x64, 0x54, 0x4C, 0x44,  # z
            0x00, 0x08, 0x36, 0x41, 0x00,  # {
            0x00, 0x00, 0x7F, 0x00, 0x00,  # |
            0x00, 0x41, 0x36, 0x08, 0x00,  # }
            0x02, 0x01, 0x02, 0x04, 0x02,  # ~
        ]
        for cmd in init_sequence:
            self.send_command(cmd)

    def turn_on(self):
        self.initialize()
        self.send_command(SSD1306_DISPLAY_ON)

    def display_text(self, text, x=0, y=0):
        # Set position to start displaying text
        self.set_position(x, y)
        for char in text:
            self.write_char(char)

    def write_char(self, char):
        # Basic 5x8 font
        font = [
            0x00, 0x00, 0x00, 0x00, 0x00,  # Space
            0x00, 0x00, 0x5F, 0x00, 0x00,  # !
            # Add more characters as needed
        ]
        index = ord(char) - 32
        for i in range(5):
            self.bus.write_byte_data(SSD1306_I2C_ADDRESS, 0x40, font[index * 5 + i])
        self.bus.write_byte_data(SSD1306_I2C_ADDRESS, 0x40, 0x00)  # Space between characters

    def set_position(self, x, y):
        self.send_command(0xB0 + y)
        self.send_command(0x00 + (x & 0x0F))
        self.send_command(0x10 + ((x >> 4) & 0x0F))

    def display_image(self, image):
        # Display a bitmap image
        self.set_position(0, 0)
        for byte in image:
            self.bus.write_byte_data(SSD1306_I2C_ADDRESS, 0x40, byte)
        # Fill the screen with a test pattern
        for i in range(0, 128 * 8):
            self.bus.write_byte_data(SSD1306_I2C_ADDRESS, 0x40, 0xFF)  # 0x40 is the data mode

    def turn_off(self):
        self.send_command(SSD1306_DISPLAY_OFF)

if __name__ == "__main__":
    display = SSD1306()
    display.turn_on()
    display.display_text("Hello, World!", 0, 0)
    # Example cat image (replace with actual image data)
    cat_image = [
        0x00, 0x3C, 0x42, 0xA9, 0x85, 0xA9, 0x91, 0x42, 0x3C, 0x00,
        # Add more bytes to complete the image
    ]
    display.display_image(cat_image)
    time.sleep(5)
    display.turn_off()
